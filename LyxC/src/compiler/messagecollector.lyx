import src::stringbuilder
import src::parser::parser

struct SourcePosition
    path: string
    start: u32
    end: u32
    
enum Message
    HeadMessage
    PositionCapableMessage
        message: string
        position: SourcePosition
    MessageCons
        head: Message
        tail: Message

struct MessageCollector
    headMessage: Message

impl MessageCollector
    fun apply(): MessageCollector => MessageCollector(HeadMessage)

    method fun append(self: MessageCollector, message: string, position: SourcePosition): void =>
        self.append(PositionCapableMessage(message, position))

    method fun append(self: MessageCollector, message: PositionCapableMessage): void =>
        case self.headMessage of
            HeadMessage -> self.headMessage = message
            else        -> self.headMessage = MessageCons(message, self.headMessage)

    fun collectErrors(node: AstNode, messageCollector: MessageCollector, path: string): i32 =>
        match node
            SyntaxError(token, message) ->
                messageCollector.append(message, SourcePosition(path, token.start, token.end))
                1
            UnexpectedToken(token, value) ->
                messageCollector.append("Unexpected token \"" ++ value ++ "\"", SourcePosition(path, token.start, token.end))
                1
            Node(name, child) ->
                collectErrors(child, messageCollector, path)
            AstCons(head, tail) ->
                collectErrors(head, messageCollector, path) + collectErrors(tail, messageCollector, path)
            else ->
                0
