import system::core::native
import system::core::u32
import system::core::i32

type bool = %stack { lowLevelType="i32" byteSize=1 }

impl bool
    fun == (lhs: bool, rhs: bool): bool => wasm
        (i32.eq
            (i32.eqz (local.get $lhs))
            (i32.eqz (local.get $rhs)))

    fun != (lhs: bool, rhs: bool): bool => wasm
        (i32.ne
            (i32.eqz (local.get $lhs))
            (i32.eqz (local.get $rhs)))

    fun && (lhs: bool, rhs: bool): bool => wasm
        (i32.and
            (i32.ne (local.get $lhs) (i32.const 0))
            (i32.ne (local.get $rhs) (i32.const 0)))

    fun || (lhs: bool, rhs: bool): bool => wasm
        (i32.or
            (i32.ne (local.get $lhs) (i32.const 0))
            (i32.ne (local.get $rhs) (i32.const 0)))


    fun ! (rhs: bool): bool =>
        if rhs then false else true

    fun store(lhs: ref, rhs: bool): void => wasm
        (i32.store8
            (call $addressFromRef (local.get $lhs))
            (local.get $rhs))

    fun store(lhs: ref, rhs: bool, offset: u32): void => wasm
        (i32.store8
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs))
            )
            (local.get $rhs))

    fun load(lhs: ref): bool => wasm
        (i32.load8_u (call $addressFromRef (local.get $lhs)))

    fun load(lhs: ref, offset: u32): bool => wasm
        (i32.load8_u
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs))
            ))
