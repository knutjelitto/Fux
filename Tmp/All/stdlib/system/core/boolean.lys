import system::core::native
import system::core::u32
import system::core::i32

type boolean = %stack { lowLevelType="i32" byteSize=1 }

impl boolean
    
    wasm fun (&&) (lhs: boolean, rhs: boolean): boolean
        (i32.and
            (i32.ne (get_local $lhs) (i32.const 0))
            (i32.ne (get_local $rhs) (i32.const 0)))

    wasm fun (||) (lhs: boolean, rhs: boolean): boolean
        (i32.or
            (i32.ne (get_local $lhs) (i32.const 0))
            (i32.ne (get_local $rhs) (i32.const 0)))

    wasm fun (==) (lhs: boolean, rhs: boolean): boolean 
        (i32.eq
            (i32.eqz (get_local $lhs))
            (i32.eqz (get_local $rhs)))

    wasm fun (!=) (lhs: boolean, rhs: boolean): boolean 
        (i32.ne
            (i32.eqz (get_local $lhs))
            (i32.eqz (get_local $rhs)))


    fun (!) (rhs: boolean): boolean
        if rhs then false else true

    wasm fun store(lhs: ref, rhs: boolean): void 
        (i32.store8
            (call $addressFromRef (get_local $lhs))
            (get_local $rhs))

    wasm fun store(lhs: ref, rhs: boolean, offset: u32): void 
        (i32.store8
            (i32.add
                (get_local $offset)
                (call $addressFromRef (get_local $lhs))
            )
            (get_local $rhs))

    wasm fun load(lhs: ref): boolean
        (i32.load8_u (call $addressFromRef (get_local $lhs)))

    wasm fun load(lhs: ref, offset: u32): boolean 
        (i32.load8_u
            (i32.add
                (get_local $offset)
                (call $addressFromRef (get_local $lhs))
            ))
