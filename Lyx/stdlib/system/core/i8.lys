import system::core::bool
import system::core::bytes
import system::core::f32
import system::core::f64
import system::core::i32
import system::core::i64
import system::core::string
import system::core::native
import system::core::u16
import system::core::u32
import system::core::u64
import system::core::u8


type i8 = %stack { lowLevelType="i32" byteSize=1 }

impl i8
    fun as(lhs: i8): i16 => wasm (local.get $lhs)
    fun as(lhs: i8): i32 => wasm (local.get $lhs)
    fun as(lhs: i8): i64 => wasm (i64.extend_i32_s (local.get $lhs))
    fun as(lhs: i8): f32 => wasm (f32.convert_i32_s (local.get $lhs))
    fun as(lhs: i8): f64 => wasm (f64.convert_i32_s (local.get $lhs))

    explicit fun as(lhs: i8): u8 => wasm (i32.and (i32.const 0xFF) (local.get $lhs))

    fun == (lhs: i8, rhs: i8): bool => wasm (i32.eq (local.get $lhs) (local.get $rhs))
    fun != (lhs: i8, rhs: i8): bool => wasm (i32.ne (local.get $lhs) (local.get $rhs))

    fun & (lhs: i8, rhs: i8): i8 => wasm (i32.and (local.get $lhs) (local.get $rhs))
    fun | (lhs: i8, rhs: i8): i8 => wasm (i32.or (local.get $lhs) (local.get $rhs))
    fun ^ (lhs: i8, rhs: i8): i8 => wasm (i32.xor (local.get $lhs) (local.get $rhs))

    fun + (lhs: i16, rhs: i8): i8 => wasm
        (i32.shr_s
            (i32.shl
                (i32.add
                    (local.get $lhs)
                    (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    fun - (lhs: i8, rhs: i8): i8 => wasm
        (i32.shr_s
            (i32.shl
                (i32.sub
                    (local.get $lhs)
                    (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    fun * (lhs: i8, rhs: i8): i8 => wasm
        (i32.shr_s
            (i32.shl
                (i32.mul
                    (local.get $lhs)
                    (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    fun / (lhs: i8, rhs: i8): i8 => wasm
        (i32.div_s
            (local.get $lhs)
            (local.get $rhs))

    fun % (lhs: i8, rhs: i8): i8 => wasm
        (i32.rem_s
            (local.get $lhs)
            (local.get $rhs))

    fun ~ (rhs: i8): i8 => wasm
        (i32.xor
            (i32.const 0xFFFFFFFF)
            (local.get $rhs))

    fun >> (lhs: i8, rhs: size): i16 => wasm
        (i32.shr_s
            (local.get $lhs)
            (i32.and
                (local.get $rhs)
                (i32.const 15)))

    fun << (lhs: i8, rhs: size): i16 => wasm
        (i32.shr_s
            (i32.shl
                (i32.shl
                    (local.get $lhs)
                    (i32.and
                        (local.get $rhs)
                        (i32.const 7)))
                (i32.const 24))
            (i32.const 24))

    fun >= (lhs: i8, rhs: i8): bool => wasm (i32.ge_s (local.get $lhs) (local.get $rhs))
    fun <= (lhs: i8, rhs: i8): bool => wasm (i32.le_s (local.get $lhs) (local.get $rhs))
    fun > (lhs: i8, rhs: i8): bool => wasm (i32.gt_s (local.get $lhs) (local.get $rhs))
    fun < (lhs: i8, rhs: i8): bool => wasm (i32.lt_s (local.get $lhs) (local.get $rhs))

    fun -(rhs: i8): i8 => wasm
        (i32.shr_s
            (i32.shl
                (i32.sub
                    (i32.const 0)
                    (local.get $rhs))
                (i32.cons 24))
            (i32.const 24))


    fun store(lhs: ref, rhs: i8): void => wasm
        (i32.store8
            (call $addressFromRef
                (local.get $lhs))
            (local.get $rhs))

    fun store(lhs: ref, rhs: i8, offset: offset): void => wasm
        (i32.store8
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs)))
            (local.get $rhs))

    fun load(lhs: ref): i8 => wasm
        (i32.load8_s
            (call $addressFromRef (local.get $lhs)))

    fun load(lhs: ref, offset: u32): i8 => wasm    
        (i32.load8_s
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs))))

