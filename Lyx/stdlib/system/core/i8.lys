import system::core::boolean
import system::core::bytes
import system::core::f32
import system::core::f64
import system::core::i8
import system::core::i16
import system::core::i32
import system::core::i64
import system::core::string
import system::core::native
import system::core::u8
import system::core::u16
import system::core::u32
import system::core::u64
import system::core::u8


type i8 = %stack { lowLevelType="i32" byteSize=1 }

impl i8
    wasm fun (as) (lhs: i8): i16
        (local.get $lhs)

    wasm fun (as) (lhs: i8): i32
        (local.get $lhs)

    wasm fun (as) (lhs: i8): i64
        (i64.extend_i32_s (local.get $lhs))

    wasm fun (as) (lhs: i8): f32
        (f32.convert_i32_s (local.get $lhs))

    wasm fun (as) (lhs: i8): f64
        (f64.convert_i32_s (local.get $lhs))

    explicit wasm fun (as) (lhs: i8): u8
        (i32.and (i32.const 0xFF) (local.get $lhs))

    wasm fun (==) (lhs: i8, rhs: i8): boolean
        (i32.eq (local.get $lhs) (local.get $rhs))

    wasm fun (!=) (lhs: i16, rhs: i32): boolean
        (i32.ne (local.get $lhs) (local.get $rhs))

    wasm fun (!=) (lhs: i8, rhs: i8): boolean
        (i32.ne (local.get $lhs) (local.get $rhs))

    wasm fun (&) (lhs: i8, rhs: i8): i8
        (i32.and (local.get $lhs) (local.get $rhs))

    wasm fun (|) (lhs: i8, rhs: i8): i8
        (i32.or (local.get $lhs) (local.get $rhs))

    wasm fun (^) (lhs: i8, rhs: i8): i8
        (i32.xor (local.get $lhs) (local.get $rhs))

    wasm fun (+) (lhs: i8, rhs: i8): i8
        (i32.shr_s
            (i32.shl 
                (i32.add (local.get $lhs) (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    wasm fun (-) (lhs: i8, rhs: i8): i8
        (i32.shr_s
            (i32.shl 
                (i32.sub (local.get $lhs) (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    wasm fun (*) (lhs: i8, rhs: i8): i8
        (i32.shr_s
            (i32.shl
                (i32.mul (local.get $lhs) (local.get $rhs))
                (i32.const 24))
            (i32.const 24))

    // if RHS is 0, then panic()
    wasm fun (/) (lhs: i8, rhs: i8): i8
        (i32.div_s (local.get $lhs) (local.get $rhs))

    wasm fun (%)  (lhs: i8, rhs: i8): i8
        (i32.rem_s (local.get $lhs) (local.get $rhs))

    wasm fun (~) (rhs: i8): i8
        (i32.xor (i32.const 0xFFFFFFFF) (local.get $rhs))

    wasm fun (>>) (lhs: i8, rhs: i32): i8
        (i32.shr_s
            (local.get $lhs)
            (i32.and (local.get $rhs) (i32.const 0x7)))

    wasm fun (<<) (lhs: i8, rhs: i32): i8
        (i32.shr_s
            (i32.shl
                (i32.shl
                    (local.get $lhs)
                    (i32.and (local.get $rhs) (i32.const 0x7)))
                (i32.const 24))
            (i32.const 24))

    wasm fun (^) (lhs: i8, rhs: i8): i8
        (i32.xor (local.get $lhs) (local.get $rhs))

    wasm fun (>=) (lhs: i8, rhs: i8): boolean
        (i32.ge_s (local.get $lhs) (local.get $rhs))

    wasm fun (<=) (lhs: i8, rhs: i8): boolean
        (i32.le_s (local.get $lhs) (local.get $rhs))

    wasm fun (>)  (lhs: i8, rhs: i8): boolean
        (i32.gt_s (local.get $lhs) (local.get $rhs))
    
    wasm fun (<) (lhs: i8, rhs: i8): boolean
        (i32.lt_s (local.get $lhs) (local.get $rhs))

    wasm fun (-) (rhs: i8): i8
        // (0 - rhs) << 24 >> 24
        (i32.shr_s
            (i32.shl
                (i32.sub (i32.const 0) (local.get $rhs))
                (i32.const 24))
            (i32.const 24))


    wasm fun store(lhs: ref, rhs: i8): void
        (i32.store8
            (call $addressFromRef (local.get $lhs))
            (local.get $rhs))

    wasm fun store(lhs: ref, rhs: i8, offset: u32): void
        (i32.store8
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs)))
        (local.get $rhs))

    wasm fun load(lhs: ref): i8
        (i32.load8_s (call $addressFromRef (local.get $lhs)))

    wasm fun load(lhs: ref, offset: u32): i8
        (i32.load8_s
            (i32.add
                (local.get $offset)
                (call $addressFromRef (local.get $lhs))))
